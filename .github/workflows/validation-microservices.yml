name: "Microservices validation"

on:
  issue_comment:
    types: [created]


jobs:
    validate-microservices:
      if: ${{ (github.event.issue.pull_request) && contains(github.event.comment.body, '/RunTests') }}
      name: "Validation :: Microservices"
      runs-on: [ innersource.prod.amr.dind ]
      container: cache-registry.caas.intel.com/cache/library/ubuntu:24.04
      environment: default
      concurrency:
        group: validation
      permissions:
        id-token: write
        contents: read
      defaults:
        run:
          shell: bash
      env:
        REMOTE_GAUDI_HOST: dcgaudicluster1
        REMOTE_WORKSPACE: "/tmp/${{ github.event.issue.number }}/${{ github.run_number }}/${{ github.run_attempt }}"
        SPECIFIC_TESTS: ""
      steps:
        - name: Install deps
          run: apt update && apt install -y rsync netcat-openbsd openssh-client python3 python3-requests

        - name: Checkout actions
          uses: actions/checkout@v4
          with:
            ref: "refs/pull/${{ github.event.issue.number }}/head"
            sparse-checkout: '.github/actions/'

        - name: "Parse comment arguments"
          uses: ./.github/actions/parse-microservices-list
          with:
            comment: ${{ github.event.comment.body }}

        - name: Install SSH key
          uses: ./.github/actions/install-ssh-key
          with:
            key: ${{ secrets.SSH_KEY }}
            name: enterpriseRAG1
            config: ${{ secrets.SSH_CONFIG }}
            known_hosts: ${{ secrets.SSH_GAUDI1_KNOWN_HOSTS }}

        - name: Checkout repo
          uses: actions/checkout@v4
          with:
            ref: "refs/pull/${{ github.event.issue.number }}/head"
            path: repo

        - uses: intel-innersource/frameworks.actions.certs@latest
          if: always()

        - name: Collect credentials from Conjur
          if: always()
          uses: intel-innersource/frameworks.actions.conjur-fetch@v1
          with:
            host_id: host/github-apps-oidc/43211-raglabel
            secrets: >
              FMSPAMVLT101/LOBUSER_prapp/AAM-DV-43211-ENTERPRISEAIRA/Operating System-UnmanagedAccounts-AllOSs-jira_token/password|JIRA_TOKEN;
              FMSPAMVLT101/LOBUSER_prapp/AAM-DV-43211-ENTERPRISEAIRA/Operating System-UnmanagedAccounts-AllOSs-hugging_face_token/password|HF_TOKEN

        - name: "Create workspace directory"
          uses: ./.github/actions/execute_remote_script
          with:
            host: ${{ env.REMOTE_GAUDI_HOST }}
            run: mkdir -p ${{ env.REMOTE_WORKSPACE }}

        - name: rsync over SSH
          run: rsync -r repo/* ${REMOTE_GAUDI_HOST}:${REMOTE_WORKSPACE}/

        - name: "Run all tests"
          if: ${{ env.SPECIFIC_TESTS == '' }}
          uses: ./.github/actions/execute_remote_script
          env:
            HF_TOKEN: ${{ env.HF_TOKEN }}
          with:
            host: ${{ env.REMOTE_GAUDI_HOST }}
            run: |
              cd ${{ env.REMOTE_WORKSPACE }}/src
              HF_TOKEN=${{ env.HF_TOKEN }} tox -e microservices

        - name: "Run selected tests"
          if: ${{ env.SPECIFIC_TESTS != '' }}
          uses: ./.github/actions/execute_remote_script
          env:
            HF_TOKEN: ${{ env.HF_TOKEN }}
          with:
            host: ${{ env.REMOTE_GAUDI_HOST }}
            run: |
              cd ${{ env.REMOTE_WORKSPACE }}/src
              HF_TOKEN=${{ env.HF_TOKEN }} tox -e microservices -- -m "${{ env.SPECIFIC_TESTS }}"

        - name: Download allure-results
          if: always()
          run: rsync -avzh ${REMOTE_GAUDI_HOST}:${REMOTE_WORKSPACE}/src/tests/microservices/allure-results repo/src/tests/microservices

        - name: Upload results to Zephyr
          if: always()
          run: |
            echo "Attempting to upload results to Zephyr"
            cd repo/src/tests/microservices
            python3 upload_test_results_to_zephyr.py -t ${{ env.JIRA_TOKEN }}
            echo "Uploading results to Zephyr finished"

        - name: Clean up container
          if: always()
          uses: ./.github/actions/execute_remote_script
          with:
            host: ${{ env.REMOTE_GAUDI_HOST }}
            run: |
              cid=$(docker ps -aq --filter "name=test-comps-embeddings*")
              if [[ ! -z "$cid" ]]; then echo "Cleaning up test-comps-embeddings containers..." && docker stop $cid && docker rm $cid && sleep 1s; fi

        - name: Clean up workspace
          if: always()
          uses: ./.github/actions/execute_remote_script
          with:
            host: ${{ env.REMOTE_GAUDI_HOST }}
            run: |
              rm -rf ${{ env.REMOTE_WORKSPACE }}
              echo "Workspace has been removed"
